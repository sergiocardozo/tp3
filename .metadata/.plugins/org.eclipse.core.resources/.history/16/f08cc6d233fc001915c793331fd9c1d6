#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "LinkedList.h"
#include "Employee.h"


/** \brief Carga los datos de los empleados desde el archivo data.csv (modo texto).
 *
 * \param path char*
 * \param pArrayListEmployee LinkedList*
 * \return int
 *
 */
int controller_loadFromText(char* path , LinkedList* pArrayListEmployee)
{

	int retorno = -1;

	FILE* pArchivo;

	if(pArchivo != NULL)
	{
		pArchivo = fopen(path,"r");

		parser_EmployeeFromText(pArchivo,pArrayListEmployee);

		retorno = 0;
	}

	fclose(pArchivo);

    return retorno;
}

/** \brief Carga los datos de los empleados desde el archivo data.csv (modo binario).
 *
 * \param path char*
 * \param pArrayListEmployee LinkedList*
 * \return int
 *
 */
int controller_loadFromBinary(char* path , LinkedList* pArrayListEmployee)
{
	int retorno = -1;

	FILE* pArch;

	if(pArch != NULL)
	{
		pArch = fopen(path,"rb");
		parser_EmployeeFromBinary(*pArch,pArrayListEmployee);

		retorno = 0;
	}
	fclose(pArch);

    return retorno;
}

/** \brief Alta de empleados
 *
 * \param path char*
 * \param pArrayListEmployee LinkedList*
 * \return int
 *
 */
int controller_addEmployee(LinkedList* pArrayListEmployee)
{
	char auxNombre[50];
	char auxApellido[50];
	float auxSalario;
	int auxSector;
	int ret = -1;


		getValidString("\nIngrese Nombre: ","\nNo es un nombre valido","\nLongitud maxima 50", auxNombre,50,3);
		getValidString("\nIngrese Apellido: ","\nNo es un apellido valido","\nLongitud maxima 50",auxApellido,50,3);
		auxSalario = getValidFloat("\nIngrese nuevo salario: ", "\nError, ingrese solo numeros: ", 1, 10000000);
		auxSector = getValidIntA("\nIngrese nuevo sector: ", "\nError, ingrese solo numeros: ",1,1000);



	return ret;

}

/** \brief Modificar datos de empleado
 *
 * \param path char*
 * \param pArrayListEmployee LinkedList*
 * \return int
 *
 */
int controller_editEmployee(LinkedList* pArrayListEmployee)
{
    return 1;
}

/** \brief Baja de empleado
 *
 * \param path char*
 * \param pArrayListEmployee LinkedList*
 * \return int
 *
 */
int controller_removeEmployee(LinkedList* pArrayListEmployee)
{
    return 1;
}

/** \brief Listar empleados
 *
 * \param path char*
 * \param pArrayListEmployee LinkedList*
 * \return int
 *
 */
int controller_ListEmployee(LinkedList* pArrayListEmployee)
{
    return 1;
}

/** \brief Ordenar empleados
 *
 * \param path char*
 * \param pArrayListEmployee LinkedList*
 * \return int
 *
 */
int controller_sortEmployee(LinkedList* pArrayListEmployee)
{
    return 1;
}

/** \brief Guarda los datos de los empleados en el archivo data.csv (modo texto).
 *
 * \param path char*
 * \param pArrayListEmployee LinkedList*
 * \return int
 *
 */
int controller_saveAsText(char* path , LinkedList* pArrayListEmployee)
{
    return 1;
}

/** \brief Guarda los datos de los empleados en el archivo data.csv (modo binario).
 *
 * \param path char*
 * \param pArrayListEmployee LinkedList*
 * \return int
 *
 */
int controller_saveAsBinary(char* path , LinkedList* pArrayListEmployee)
{
    return 1;
}

