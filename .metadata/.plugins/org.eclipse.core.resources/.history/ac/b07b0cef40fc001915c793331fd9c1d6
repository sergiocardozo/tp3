#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "LinkedList.h"
#include "Employee.h"
#include "parser.h"

static int generarId(void)
{
	static int id = 0;
	return id++;
}
/** \brief Carga los datos de los empleados desde el archivo data.csv (modo texto).
 *
 * \param path char*
 * \param pArrayListEmployee LinkedList*
 * \return int
 *
 */
int controller_loadFromText(char* path , LinkedList* pArrayListEmployee)
{

	int retorno = -1;

	FILE* pArchivo;

	if(pArchivo != NULL)
	{
		pArchivo = fopen(path,"r");

		parser_EmployeeFromText(pArchivo,pArrayListEmployee);

		retorno = 0;
	}

	fclose(pArchivo);

    return retorno;
}

/** \brief Carga los datos de los empleados desde el archivo data.csv (modo binario).
 *
 * \param path char*
 * \param pArrayListEmployee LinkedList*
 * \return int
 *
 */
int controller_loadFromBinary(char* path , LinkedList* pArrayListEmployee)
{
	int retorno = -1;

	FILE* pArch;

	if(pArch != NULL)
	{
		pArch = fopen(path,"rb");
		parser_EmployeeFromBinary(pArch,pArrayListEmployee);

		retorno = 0;
	}
	fclose(pArch);

    return retorno;
}

/** \brief Alta de empleados
 *
 * \param path char*
 * \param pArrayListEmployee LinkedList*
 * \return int
 *
 */
int controller_addEmployee(LinkedList* pArrayListEmployee)
{
	Employee* pEmpleados;
	pEmpleados = employee_new();

	int auxId;
	char auxNombre[50];
	int auxSueldo;
	int auxHorasTrabajadas;
	int ret = -1;

	if(pArrayListEmployee != NULL)
	{
		auxId = generarId();
		utn_getName("\nIngrese Nombre: ","\nNo es un nombre valido",0,50,3,auxNombre);
		utn_getUnsignedInt("\nIngrese Horas Trabajadas: ","\nNo es una hora valida",1,sizeof(int),1,100,3,&auxHorasTrabajadas);
		utn_getFloat("\nIngrese el sueldo: ", "\nError, ingrese solo numeros: ",1,sizeof(float),1,10000000,3,&auxSueldo);

		ret = 0;
	}

	return ret;

}

/** \brief Modificar datos de empleado
 *
 * \param path char*
 * \param pArrayListEmployee LinkedList*
 * \return int
 *
 */
int controller_editEmployee(LinkedList* pArrayListEmployee)
{
    return 1;
}

/** \brief Baja de empleado
 *
 * \param path char*
 * \param pArrayListEmployee LinkedList*
 * \return int
 *
 */
int controller_removeEmployee(LinkedList* pArrayListEmployee)
{
    return 1;
}

/** \brief Listar empleados
 *
 * \param path char*
 * \param pArrayListEmployee LinkedList*
 * \return int
 *
 */
int controller_ListEmployee(LinkedList* pArrayListEmployee)
{
    return 1;
}

/** \brief Ordenar empleados
 *
 * \param path char*
 * \param pArrayListEmployee LinkedList*
 * \return int
 *
 */
int controller_sortEmployee(LinkedList* pArrayListEmployee)
{
    return 1;
}

/** \brief Guarda los datos de los empleados en el archivo data.csv (modo texto).
 *
 * \param path char*
 * \param pArrayListEmployee LinkedList*
 * \return int
 *
 */
int controller_saveAsText(char* path , LinkedList* pArrayListEmployee)
{
    return 1;
}

/** \brief Guarda los datos de los empleados en el archivo data.csv (modo binario).
 *
 * \param path char*
 * \param pArrayListEmployee LinkedList*
 * \return int
 *
 */
int controller_saveAsBinary(char* path , LinkedList* pArrayListEmployee)
{
    return 1;
}

